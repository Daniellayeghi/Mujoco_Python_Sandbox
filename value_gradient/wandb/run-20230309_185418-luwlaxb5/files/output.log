Creating window glfw
Epochs: 1, Loss: 12621795328.0, lr: 0.009940030040090253, time: 50
Epochs: 2, Loss: 12472271872.0, lr: 0.009880120321448116, time: 50
Epochs: 3, Loss: 12120483840.0, lr: 0.009820271087351824, time: 50
Epochs: 4, Loss: 11788897280.0, lr: 0.009760482583301363, time: 50
Epochs: 5, Loss: 11471826944.0, lr: 0.009700755057050188, time: 50
Epochs: 6, Loss: 11164791808.0, lr: 0.009641088758637567, time: 50
Epochs: 7, Loss: 10867188736.0, lr: 0.00958148394042156, time: 50
Epochs: 8, Loss: 10561815552.0, lr: 0.009521940857112636, time: 50
Epochs: 9, Loss: 10257881088.0, lr: 0.009462459765807965, time: 50
Epochs: 10, Loss: 9548871680.0, lr: 0.00940304092602639, time: 59
Epochs: 11, Loss: 9254193152.0, lr: 0.009343684599744093, time: 59
Epochs: 12, Loss: 8895201280.0, lr: 0.009284391051430982, time: 59
Epochs: 13, Loss: 8517260288.0, lr: 0.00922516054808782, time: 59
Epochs: 14, Loss: 8095368192.0, lr: 0.009165993359284084, time: 59
Epochs: 15, Loss: 7665948160.0, lr: 0.009106889757196639, time: 59
Epochs: 16, Loss: 7152246272.0, lr: 0.009047850016649154, time: 59
Epochs: 17, Loss: 6631973888.0, lr: 0.008988874415152377, time: 59
Epochs: 18, Loss: 6084643328.0, lr: 0.008929963232945216, time: 59
Epochs: 19, Loss: 5596953600.0, lr: 0.008871116753036697, time: 59
Epochs: 20, Loss: 4784844288.0, lr: 0.008812335261248791, time: 65
Epochs: 21, Loss: 4389718016.0, lr: 0.008753619046260144, time: 65
Epochs: 22, Loss: 3998204672.0, lr: 0.00869496839965074, time: 65
Epochs: 23, Loss: 3680766208.0, lr: 0.008636383615947521, time: 65
Epochs: 24, Loss: 3397375488.0, lr: 0.00857786499267097, time: 65
Epochs: 25, Loss: 3175786240.0, lr: 0.008519412830382721, time: 65
Epochs: 26, Loss: 3093140480.0, lr: 0.008461027432734181, time: 65
Epochs: 27, Loss: 2861717760.0, lr: 0.008402709106516233, time: 65
Epochs: 28, Loss: 2764779520.0, lr: 0.008344458161710002, time: 65
Epochs: 29, Loss: 2704329472.0, lr: 0.008286274911538785, time: 65
Epochs: 30, Loss: 2626622976.0, lr: 0.008228159672521091, time: 70
Epochs: 31, Loss: 2594433536.0, lr: 0.008170112764524893, time: 70
Epochs: 32, Loss: 2577454848.0, lr: 0.008112134510823083, time: 70
Epochs: 33, Loss: 2569154560.0, lr: 0.008054225238150201, time: 70
Epochs: 34, Loss: 2564816384.0, lr: 0.007996385276760424, time: 70
Epochs: 35, Loss: 2561171968.0, lr: 0.007938614960486916, time: 70
Epochs: 36, Loss: 2555819776.0, lr: 0.00788091462680252, time: 70
Epochs: 37, Loss: 2547146240.0, lr: 0.007823284616881854, time: 70
Epochs: 38, Loss: 2534215424.0, lr: 0.007765725275664881, time: 70
Epochs: 39, Loss: 2516750080.0, lr: 0.007708236951921931, time: 70
Epochs: 40, Loss: 2650784256.0, lr: 0.007650819998320297, time: 74
Epochs: 41, Loss: 2625892352.0, lr: 0.007593474771492367, time: 74
Epochs: 42, Loss: 2598009088.0, lr: 0.007536201632105431, time: 74
Epochs: 43, Loss: 2568337408.0, lr: 0.007479000944933124, time: 74
Epochs: 44, Loss: 2538059776.0, lr: 0.007421873078928632, time: 74
Epochs: 45, Loss: 2508226304.0, lr: 0.007364818407299646, time: 74
Epochs: 46, Loss: 2479619072.0, lr: 0.007307837307585186, time: 74
Epochs: 47, Loss: 2452863488.0, lr: 0.007250930161734293, time: 74
Epochs: 48, Loss: 2428366848.0, lr: 0.00719409735618669, time: 74
Epochs: 49, Loss: 2406304512.0, lr: 0.007137339281955456, time: 74
Epochs: 50, Loss: 2583688448.0, lr: 0.007080656334711765, time: 77
Epochs: 51, Loss: 2566863872.0, lr: 0.007024048914871794, time: 77
Epochs: 52, Loss: 2551770880.0, lr: 0.006967517427685831, time: 77
Epochs: 53, Loss: 2538022656.0, lr: 0.006911062283329664, time: 77
Epochs: 54, Loss: 2525117696.0, lr: 0.006854683896998351, time: 77
Epochs: 55, Loss: 2512702208.0, lr: 0.006798382689002409, time: 77
Epochs: 56, Loss: 2500240128.0, lr: 0.006742159084866536, time: 77
Epochs: 57, Loss: 2487659520.0, lr: 0.006686013515430926, time: 77
########## Saving Trace ##########
Traceback (most recent call last):
  File "tv_value_synthesis_trajopt_cartpole.py", line 198, in <module>
    traj, dtraj_dt = odeint(dyn_system, x_init, time, method='euler', options=dict(step_size=dt))
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/adjoint.py", line 209, in odeint_adjoint
    adjoint_method, adjoint_options, t.requires_grad, *adjoint_params)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/adjoint.py", line 23, in forward
    ans, ans_dt = odeint(func, y0, t, rtol=rtol, atol=atol, method=method, options=options)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/odeint.py", line 57, in odeint
    solution, solution_dt = solver.integrate(t)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/solvers.py", line 72, in integrate
    dy, f0 = self._step_func(self.func, t0, dt, t1, y0)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/fixed_grid.py", line 9, in _step_func
    f0 = func(t0, y0, perturb=Perturb.NEXT if self.perturb else Perturb.NONE)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/misc.py", line 193, in forward
    return self.base_func(t, y)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torchdiffeq_ctrl/_impl/misc.py", line 193, in forward
    return self.base_func(t, y)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1208, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/home/daniel/Repos/Mujoco_Python_Sandbox/value_gradient/neural_value_synthesis_diffeq.py", line 165, in forward
    u = self._ctrl(t, x)
  File "/home/daniel/Repos/Mujoco_Python_Sandbox/value_gradient/neural_value_synthesis_diffeq.py", line 110, in hjb
    x_enc = self._encoder(x)
  File "tv_value_synthesis_trajopt_cartpole.py", line 44, in state_encoder
    qp = atan2_encoder(qp)
  File "tv_value_synthesis_trajopt_cartpole.py", line 37, in atan2_encoder
    return torch.atan2(torch.sin(x), torch.cos(x))
KeyboardInterrupt
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "tv_value_synthesis_trajopt_cartpole.py", line 239, in <module>
    model_scripted = torch.jit.script(dyn_system.value_func.to('cpu'))  # Export to TorchScript
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/jit/_script.py", line 1287, in script
    obj, torch.jit._recursive.infer_methods_to_compile
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/jit/_recursive.py", line 476, in create_script_module
    return create_script_module_impl(nn_module, concrete_type, stubs_fn)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/jit/_recursive.py", line 542, in create_script_module_impl
    create_methods_and_properties_from_stubs(concrete_type, method_stubs, property_stubs)
  File "/home/daniel/.local/share/virtualenvs/Mujoco_Python_Sandbox-gNKKWzd6/lib/python3.7/site-packages/torch/jit/_recursive.py", line 393, in create_methods_and_properties_from_stubs
    concrete_type._create_methods_and_properties(property_defs, property_rcbs, method_defs, method_rcbs, method_defaults)
RuntimeError:
attribute lookup is not defined on python value of type 'SimulationParams':
  File "tv_value_synthesis_trajopt_cartpole.py", line 74
    def forward(self, t, x):
        time = torch.ones((sim_params.nsim, 1, 1)).to(device) * t
                           ~~~~~~~~~~~~~~~ <--- HERE
        aug_x = torch.cat((x, time), dim=2)
        return self.nn(aug_x)